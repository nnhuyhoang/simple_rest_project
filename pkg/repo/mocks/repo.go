// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repo/repo.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	model "github.com/nnhuyhoang/simple_rest_project/backend/pkg/model"
	repo "github.com/nnhuyhoang/simple_rest_project/backend/pkg/repo"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepo) Create(s repo.DBRepo, param model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", s, param)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepoMockRecorder) Create(s, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepo)(nil).Create), s, param)
}

// GetAll mocks base method.
func (m *MockUserRepo) GetAll(s repo.DBRepo) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", s)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserRepoMockRecorder) GetAll(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserRepo)(nil).GetAll), s)
}

// GetByEmail mocks base method.
func (m *MockUserRepo) GetByEmail(s repo.DBRepo, email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", s, email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserRepoMockRecorder) GetByEmail(s, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserRepo)(nil).GetByEmail), s, email)
}

// GetById mocks base method.
func (m *MockUserRepo) GetById(s repo.DBRepo, id int) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", s, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserRepoMockRecorder) GetById(s, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserRepo)(nil).GetById), s, id)
}

// GetByPhone mocks base method.
func (m *MockUserRepo) GetByPhone(s repo.DBRepo, phone string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhone", s, phone)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhone indicates an expected call of GetByPhone.
func (mr *MockUserRepoMockRecorder) GetByPhone(s, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhone", reflect.TypeOf((*MockUserRepo)(nil).GetByPhone), s, phone)
}

// GetByRoleCode mocks base method.
func (m *MockUserRepo) GetByRoleCode(s repo.DBRepo, roleCode string) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRoleCode", s, roleCode)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRoleCode indicates an expected call of GetByRoleCode.
func (mr *MockUserRepoMockRecorder) GetByRoleCode(s, roleCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRoleCode", reflect.TypeOf((*MockUserRepo)(nil).GetByRoleCode), s, roleCode)
}

// MockInspectionRepo is a mock of InspectionRepo interface.
type MockInspectionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockInspectionRepoMockRecorder
}

// MockInspectionRepoMockRecorder is the mock recorder for MockInspectionRepo.
type MockInspectionRepoMockRecorder struct {
	mock *MockInspectionRepo
}

// NewMockInspectionRepo creates a new mock instance.
func NewMockInspectionRepo(ctrl *gomock.Controller) *MockInspectionRepo {
	mock := &MockInspectionRepo{ctrl: ctrl}
	mock.recorder = &MockInspectionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInspectionRepo) EXPECT() *MockInspectionRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInspectionRepo) Create(s repo.DBRepo, param model.Inspection) (*model.Inspection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", s, param)
	ret0, _ := ret[0].(*model.Inspection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInspectionRepoMockRecorder) Create(s, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInspectionRepo)(nil).Create), s, param)
}

// GetById mocks base method.
func (m *MockInspectionRepo) GetById(s repo.DBRepo, id int) (*model.Inspection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", s, id)
	ret0, _ := ret[0].(*model.Inspection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockInspectionRepoMockRecorder) GetById(s, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockInspectionRepo)(nil).GetById), s, id)
}

// GetByUserIdWithDate mocks base method.
func (m *MockInspectionRepo) GetByUserIdWithDate(s repo.DBRepo, date time.Time, userId int) ([]model.Inspection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserIdWithDate", s, date, userId)
	ret0, _ := ret[0].([]model.Inspection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserIdWithDate indicates an expected call of GetByUserIdWithDate.
func (mr *MockInspectionRepoMockRecorder) GetByUserIdWithDate(s, date, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIdWithDate", reflect.TypeOf((*MockInspectionRepo)(nil).GetByUserIdWithDate), s, date, userId)
}

// Update mocks base method.
func (m *MockInspectionRepo) Update(s repo.DBRepo, param model.Inspection) (*model.Inspection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", s, param)
	ret0, _ := ret[0].(*model.Inspection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockInspectionRepoMockRecorder) Update(s, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInspectionRepo)(nil).Update), s, param)
}

// MockSiteRepo is a mock of SiteRepo interface.
type MockSiteRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSiteRepoMockRecorder
}

// MockSiteRepoMockRecorder is the mock recorder for MockSiteRepo.
type MockSiteRepoMockRecorder struct {
	mock *MockSiteRepo
}

// NewMockSiteRepo creates a new mock instance.
func NewMockSiteRepo(ctrl *gomock.Controller) *MockSiteRepo {
	mock := &MockSiteRepo{ctrl: ctrl}
	mock.recorder = &MockSiteRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSiteRepo) EXPECT() *MockSiteRepoMockRecorder {
	return m.recorder
}

// GetByDate mocks base method.
func (m *MockSiteRepo) GetByDate(s repo.DBRepo, date time.Time) ([]model.Site, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDate", s, date)
	ret0, _ := ret[0].([]model.Site)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDate indicates an expected call of GetByDate.
func (mr *MockSiteRepoMockRecorder) GetByDate(s, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDate", reflect.TypeOf((*MockSiteRepo)(nil).GetByDate), s, date)
}

// GetById mocks base method.
func (m *MockSiteRepo) GetById(s repo.DBRepo, id int) (*model.Site, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", s, id)
	ret0, _ := ret[0].(*model.Site)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockSiteRepoMockRecorder) GetById(s, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockSiteRepo)(nil).GetById), s, id)
}

// GetByIdWithDate mocks base method.
func (m *MockSiteRepo) GetByIdWithDate(s repo.DBRepo, id int, date time.Time) (*model.Site, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdWithDate", s, id, date)
	ret0, _ := ret[0].(*model.Site)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdWithDate indicates an expected call of GetByIdWithDate.
func (mr *MockSiteRepoMockRecorder) GetByIdWithDate(s, id, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdWithDate", reflect.TypeOf((*MockSiteRepo)(nil).GetByIdWithDate), s, id, date)
}

// MockUserActionLogRepo is a mock of UserActionLogRepo interface.
type MockUserActionLogRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserActionLogRepoMockRecorder
}

// MockUserActionLogRepoMockRecorder is the mock recorder for MockUserActionLogRepo.
type MockUserActionLogRepoMockRecorder struct {
	mock *MockUserActionLogRepo
}

// NewMockUserActionLogRepo creates a new mock instance.
func NewMockUserActionLogRepo(ctrl *gomock.Controller) *MockUserActionLogRepo {
	mock := &MockUserActionLogRepo{ctrl: ctrl}
	mock.recorder = &MockUserActionLogRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserActionLogRepo) EXPECT() *MockUserActionLogRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserActionLogRepo) Create(s repo.DBRepo, param model.UserActionLog) (*model.UserActionLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", s, param)
	ret0, _ := ret[0].(*model.UserActionLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserActionLogRepoMockRecorder) Create(s, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserActionLogRepo)(nil).Create), s, param)
}

// MockSparePartRepo is a mock of SparePartRepo interface.
type MockSparePartRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSparePartRepoMockRecorder
}

// MockSparePartRepoMockRecorder is the mock recorder for MockSparePartRepo.
type MockSparePartRepoMockRecorder struct {
	mock *MockSparePartRepo
}

// NewMockSparePartRepo creates a new mock instance.
func NewMockSparePartRepo(ctrl *gomock.Controller) *MockSparePartRepo {
	mock := &MockSparePartRepo{ctrl: ctrl}
	mock.recorder = &MockSparePartRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSparePartRepo) EXPECT() *MockSparePartRepoMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockSparePartRepo) GetAll(s repo.DBRepo) ([]model.SparePart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", s)
	ret0, _ := ret[0].([]model.SparePart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSparePartRepoMockRecorder) GetAll(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSparePartRepo)(nil).GetAll), s)
}

// GetById mocks base method.
func (m *MockSparePartRepo) GetById(s repo.DBRepo, id int) (*model.SparePart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", s, id)
	ret0, _ := ret[0].(*model.SparePart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockSparePartRepoMockRecorder) GetById(s, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockSparePartRepo)(nil).GetById), s, id)
}

// UpdateQuantity mocks base method.
func (m *MockSparePartRepo) UpdateQuantity(s repo.DBRepo, id, quantity int) (*model.SparePart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuantity", s, id, quantity)
	ret0, _ := ret[0].(*model.SparePart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuantity indicates an expected call of UpdateQuantity.
func (mr *MockSparePartRepoMockRecorder) UpdateQuantity(s, id, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuantity", reflect.TypeOf((*MockSparePartRepo)(nil).UpdateQuantity), s, id, quantity)
}

// MockIssueRepo is a mock of IssueRepo interface.
type MockIssueRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIssueRepoMockRecorder
}

// MockIssueRepoMockRecorder is the mock recorder for MockIssueRepo.
type MockIssueRepoMockRecorder struct {
	mock *MockIssueRepo
}

// NewMockIssueRepo creates a new mock instance.
func NewMockIssueRepo(ctrl *gomock.Controller) *MockIssueRepo {
	mock := &MockIssueRepo{ctrl: ctrl}
	mock.recorder = &MockIssueRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueRepo) EXPECT() *MockIssueRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIssueRepo) Create(s repo.DBRepo, param model.Issue) (*model.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", s, param)
	ret0, _ := ret[0].(*model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIssueRepoMockRecorder) Create(s, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIssueRepo)(nil).Create), s, param)
}

// DeleteById mocks base method.
func (m *MockIssueRepo) DeleteById(s repo.DBRepo, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", s, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIssueRepoMockRecorder) DeleteById(s, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIssueRepo)(nil).DeleteById), s, id)
}

// GetById mocks base method.
func (m *MockIssueRepo) GetById(s repo.DBRepo, id int) (*model.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", s, id)
	ret0, _ := ret[0].(*model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIssueRepoMockRecorder) GetById(s, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIssueRepo)(nil).GetById), s, id)
}

// GetByIdWithSparePart mocks base method.
func (m *MockIssueRepo) GetByIdWithSparePart(s repo.DBRepo, id int) (*model.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdWithSparePart", s, id)
	ret0, _ := ret[0].(*model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdWithSparePart indicates an expected call of GetByIdWithSparePart.
func (mr *MockIssueRepoMockRecorder) GetByIdWithSparePart(s, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdWithSparePart", reflect.TypeOf((*MockIssueRepo)(nil).GetByIdWithSparePart), s, id)
}

// Update mocks base method.
func (m *MockIssueRepo) Update(s repo.DBRepo, param model.Issue) (*model.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", s, param)
	ret0, _ := ret[0].(*model.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIssueRepoMockRecorder) Update(s, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIssueRepo)(nil).Update), s, param)
}

// MockIssueSparePartRepo is a mock of IssueSparePartRepo interface.
type MockIssueSparePartRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIssueSparePartRepoMockRecorder
}

// MockIssueSparePartRepoMockRecorder is the mock recorder for MockIssueSparePartRepo.
type MockIssueSparePartRepoMockRecorder struct {
	mock *MockIssueSparePartRepo
}

// NewMockIssueSparePartRepo creates a new mock instance.
func NewMockIssueSparePartRepo(ctrl *gomock.Controller) *MockIssueSparePartRepo {
	mock := &MockIssueSparePartRepo{ctrl: ctrl}
	mock.recorder = &MockIssueSparePartRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueSparePartRepo) EXPECT() *MockIssueSparePartRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIssueSparePartRepo) Create(s repo.DBRepo, param model.IssueSparePart) (*model.IssueSparePart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", s, param)
	ret0, _ := ret[0].(*model.IssueSparePart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIssueSparePartRepoMockRecorder) Create(s, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIssueSparePartRepo)(nil).Create), s, param)
}

// DeleteByIssueId mocks base method.
func (m *MockIssueSparePartRepo) DeleteByIssueId(s repo.DBRepo, issueId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIssueId", s, issueId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByIssueId indicates an expected call of DeleteByIssueId.
func (mr *MockIssueSparePartRepoMockRecorder) DeleteByIssueId(s, issueId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIssueId", reflect.TypeOf((*MockIssueSparePartRepo)(nil).DeleteByIssueId), s, issueId)
}

// GetByStatus mocks base method.
func (m *MockIssueSparePartRepo) GetByStatus(s repo.DBRepo, status string) ([]model.IssueSparePart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStatus", s, status)
	ret0, _ := ret[0].([]model.IssueSparePart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStatus indicates an expected call of GetByStatus.
func (mr *MockIssueSparePartRepoMockRecorder) GetByStatus(s, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStatus", reflect.TypeOf((*MockIssueSparePartRepo)(nil).GetByStatus), s, status)
}

// GetbyId mocks base method.
func (m *MockIssueSparePartRepo) GetbyId(s repo.DBRepo, id int) (*model.IssueSparePart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetbyId", s, id)
	ret0, _ := ret[0].(*model.IssueSparePart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetbyId indicates an expected call of GetbyId.
func (mr *MockIssueSparePartRepoMockRecorder) GetbyId(s, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetbyId", reflect.TypeOf((*MockIssueSparePartRepo)(nil).GetbyId), s, id)
}

// Update mocks base method.
func (m *MockIssueSparePartRepo) Update(s repo.DBRepo, param model.IssueSparePart) (*model.IssueSparePart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", s, param)
	ret0, _ := ret[0].(*model.IssueSparePart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIssueSparePartRepoMockRecorder) Update(s, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIssueSparePartRepo)(nil).Update), s, param)
}

// MockPurchaseRequestRepo is a mock of PurchaseRequestRepo interface.
type MockPurchaseRequestRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPurchaseRequestRepoMockRecorder
}

// MockPurchaseRequestRepoMockRecorder is the mock recorder for MockPurchaseRequestRepo.
type MockPurchaseRequestRepoMockRecorder struct {
	mock *MockPurchaseRequestRepo
}

// NewMockPurchaseRequestRepo creates a new mock instance.
func NewMockPurchaseRequestRepo(ctrl *gomock.Controller) *MockPurchaseRequestRepo {
	mock := &MockPurchaseRequestRepo{ctrl: ctrl}
	mock.recorder = &MockPurchaseRequestRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPurchaseRequestRepo) EXPECT() *MockPurchaseRequestRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPurchaseRequestRepo) Create(s repo.DBRepo, param model.PurchaseRequest) (*model.PurchaseRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", s, param)
	ret0, _ := ret[0].(*model.PurchaseRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPurchaseRequestRepoMockRecorder) Create(s, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPurchaseRequestRepo)(nil).Create), s, param)
}

// GetAll mocks base method.
func (m *MockPurchaseRequestRepo) GetAll(s repo.DBRepo) ([]model.PurchaseRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", s)
	ret0, _ := ret[0].([]model.PurchaseRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPurchaseRequestRepoMockRecorder) GetAll(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPurchaseRequestRepo)(nil).GetAll), s)
}

// MockPurchaseSparePartRepo is a mock of PurchaseSparePartRepo interface.
type MockPurchaseSparePartRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPurchaseSparePartRepoMockRecorder
}

// MockPurchaseSparePartRepoMockRecorder is the mock recorder for MockPurchaseSparePartRepo.
type MockPurchaseSparePartRepoMockRecorder struct {
	mock *MockPurchaseSparePartRepo
}

// NewMockPurchaseSparePartRepo creates a new mock instance.
func NewMockPurchaseSparePartRepo(ctrl *gomock.Controller) *MockPurchaseSparePartRepo {
	mock := &MockPurchaseSparePartRepo{ctrl: ctrl}
	mock.recorder = &MockPurchaseSparePartRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPurchaseSparePartRepo) EXPECT() *MockPurchaseSparePartRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPurchaseSparePartRepo) Create(s repo.DBRepo, param model.PurchaseSparePart) (*model.PurchaseSparePart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", s, param)
	ret0, _ := ret[0].(*model.PurchaseSparePart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPurchaseSparePartRepoMockRecorder) Create(s, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPurchaseSparePartRepo)(nil).Create), s, param)
}
